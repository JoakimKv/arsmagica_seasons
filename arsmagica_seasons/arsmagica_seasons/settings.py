
# settings.py


"""
Django settings for arsmagica_seasons project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


from pathlib import Path
from .secret_vault_class import SecretVault


secretVault = SecretVault()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secretVault.getSecretKey()

# SECURITY WARNING: don't run with debug turned on in production!
# Drive DEBUG from environment/platform via SecretVault
DEBUG = secretVault.getDebugMode()

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "kvistholm.net",
    "www.kvistholm.net",
]

CSRF_TRUSTED_ORIGINS = [
    "https://kvistholm.net",
    "https://www.kvistholm.net",
    "https://kvistholm.net/blogs",
    "https://www.kvistholm.net/blogs",
    "https://kvistholm.net/blogs/",
    "https://www.kvistholm.net/blogs/",    
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "arsmagica_seasons_app"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "arsmagica_seasons.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "arsmagica_seasons_app.context_processors.blogs_url"
            ],
        },
    },
]

WSGI_APPLICATION = "arsmagica_seasons.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": secretVault.getProductionDatabase(),
        "USER": secretVault.getMySQLJKUsername(),
        "PASSWORD": secretVault.getMySQLJKPassword(),
        "HOST": secretVault.getMySQLHost(),
        "PORT": secretVault.getMySQLPort()
    },
    "testdb": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": secretVault.getTestDatabase(),
        "USER": secretVault.getMySQLJKUsername(),
        "PASSWORD": secretVault.getMySQLJKPassword(),
        "HOST": secretVault.getMySQLHost(),
        "PORT": secretVault.getMySQLPort()
    }
}

for db in DATABASES:

    DATABASES[db]["TEST"] = {
        # Intentionally do NOT point the Django test DB to the live DB name.
        # Our custom test runner avoids creating or flushing test DBs, but this
        # prevents accidental misconfiguration if a different runner is used.
        # Leave NAME empty so Django's default test DB naming is used when needed.
        "NAME": "",
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Public URL for static files
STATIC_URL = "/static/"

# Where collectstatic will place files in production
STATIC_ROOT = BASE_DIR / "staticfiles"

###
## Enable WhiteNoise in production (Linux server only)
## Avoid requiring it for local Windows development and tests.
###
try:
    if secretVault.getIsOnServer():
        # Insert right after SecurityMiddleware
        MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")
        # Use hashed + compressed static files when collected
        STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
except Exception:
    # If anything goes wrong determining environment, keep local-friendly defaults
    pass

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Use a runner that never creates or flushes databases. Tests must be written
# to operate against live DBs carefully (e.g., SimpleTestCase + explicit cleanup).
# The runner module sits alongside manage.py, importable as 'noop_db_test_runner'.
TEST_RUNNER = "noop_db_test_runner.NoDbOpsTestRunner"

BLOGS_URL = "https://kvistholm.net/blogs/" if not DEBUG else "http://localhost:5000/blogs/"
